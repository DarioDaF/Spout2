/*
=========================================================================

                        WinSpoutDX.cpp

   A Windows Desktop Application project generated by Visual Studio
   and adapted for Spout input (http://spout.zeal.co/).

   Receives to a pixel buffer using the SpoutDX support class
   and displays the output using Windows bitmap functions.
   Search on "SPOUT" for additions.

   Compare with DirectX 11 Tutorial07 example.

=========================================================================

                 Copyright(C) 2020 Lynn Jarvis.

This program is free software : you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.If not, see < http://www.gnu.org/licenses/>.
========================================================================

*/


#include "framework.h"
#include "WinSpoutDX.h"

#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                      // current instance
WCHAR szTitle[MAX_LOADSTRING];        // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];  // the main window class name

// SPOUT
HWND g_hWnd = NULL;                    // Window handle
ID3D11Device* g_pd3dDevice = nullptr;  // DirectX 11.0 device pointer
spoutDX receiver;                      // Receiver object
unsigned char *pixelBuffer = nullptr;  // Receiving rgb pixel buffer
unsigned char g_SenderName[256];       // Received sender name
unsigned int g_SenderWidth = 0;        // Received sender width
unsigned int g_SenderHeight = 0;       // Received sender height

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

// SPOUT
void Render();

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

 	// SPOUT
	// Optionally enable Spout logging
	// OpenSpoutConsole(); // Console only for debugging
	// EnableSpoutLog(); // Log to console
	// EnableSpoutLogFile("WinSpoutSDK.log"); // Log to file
	// SetSpoutLogLevel(SPOUT_LOG_WARNING); // show only warnings and errors

	// Optionally set the name of the sender to receive from
	// The receiver will only connect to that sender.
	// The user can over-ride this by selecting another.
	// receiver.SetReceiverName("Spout DX11 Sender");

    // Initialize global strings
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_WINSPOUTDX, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // Perform application initialization:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

	// SPOUT
	// Initialize DirectX.
	// This is not necessary for applications where 
	// a DirectX 11.0 device is already established.
	g_pd3dDevice = receiver.OpenDirectX11();
	if(!g_pd3dDevice)
		return FALSE;

	// Create an initial rgba receving buffer of arbitrary size.
	// It is resized when the receiver connects to a sender
	g_SenderWidth = 640;
	g_SenderWidth = 360;
	pixelBuffer = new unsigned char[g_SenderWidth * g_SenderHeight * 4];

    // Main message loop:
	MSG msg = { 0 };
	while (WM_QUIT != msg.message)
	{
		if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		else
		{
			Render();
		}
	}

	// SPOUT
	if (pixelBuffer)
		delete pixelBuffer;
	receiver.ReleaseReceiver();
	receiver.CleanupDX11();

    return (int) msg.wParam;
}

// SPOUT
void Render()
{
	// Get pixels from the sender shared texture.
	// ReceiveImage handles sender detection, connection and copy of pixels.
	// The data is flipped here ready for WM_PAINT but it could also be drawn upside down.
	if (receiver.ReceiveImage(g_pd3dDevice, pixelBuffer, g_SenderWidth, g_SenderHeight, true)) {
		
		// If IsUpdated() returns true, the sender has changed
		if (receiver.IsUpdated()) {

			// Do anything necessary for the application here.
			// In this example we must update the receiving buffer

			// Update the sender name - it could be different
			strcpy_s((char *)g_SenderName, 256, receiver.GetSenderName());

			// Update global dimensions
			g_SenderWidth = receiver.GetSenderWidth();
			g_SenderHeight = receiver.GetSenderHeight();

			// Update the receiving buffer
			if(pixelBuffer) delete pixelBuffer;
			pixelBuffer = new unsigned char[g_SenderWidth * g_SenderHeight * 4];

		}
	}

	// Trigger a re-paint to draw the pixel buffer - see WM_PAINT
	InvalidateRect(g_hWnd, NULL, FALSE);

	//
	// SPOUT - fps control
	//
	// Optionally hold a target frame rate - e.g. 60 or 30fps.
	// This is not necessary if the application already has
	// fps control. But in this example rendering is done
	// during idle time and render rate can be extremely high.
	receiver.HoldFps(60);

}

//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WINSPOUTDX));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground  = CreateHatchBrush(HS_DIAGCROSS, RGB(192, 192, 192));
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_WINSPOUTDX);
    wcex.lpszClassName  = szWindowClass;
	wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_WINSPOUTDX));

    return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // Store instance handle in our global variable

   // Create window
   RECT rc = { 0, 0, 640, 360 }; // Desired client size
   AdjustWindowRect(&rc, WS_OVERLAPPEDWINDOW, TRUE); // Allow for menu
   HWND hWnd = CreateWindowW(szWindowClass,
	   szTitle,
	   WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX,
	   CW_USEDEFAULT, CW_USEDEFAULT, rc.right - rc.left, rc.bottom - rc.top, nullptr, nullptr, hInstance,
	   nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   // SPOUT
   // Centre the window on the desktop work area
   GetWindowRect(hWnd, &rc);
   RECT WorkArea;
   int WindowPosLeft = 0;
   int WindowPosTop = 0;
   SystemParametersInfo(SPI_GETWORKAREA, 0, (LPVOID)&WorkArea, 0);
   WindowPosLeft += ((WorkArea.right  - WorkArea.left) - (rc.right - rc.left)) / 2;
   WindowPosTop  += ((WorkArea.bottom - WorkArea.top)  - (rc.bottom - rc.top)) / 2;
   MoveWindow(hWnd, WindowPosLeft, WindowPosTop, (rc.right - rc.left), (rc.bottom - rc.top), false);

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   g_hWnd = hWnd;
   
   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE: Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // Parse the menu selections:
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
			PAINTSTRUCT ps;
			HDC hdc = BeginPaint(hWnd, &ps);

			// SPOUT
			if (pixelBuffer) {
				// Draw the received image
				RECT dr = { 0 };
				GetClientRect(hWnd, &dr);
				if (!receiver.IsConnected()) {
					// No sender - draw default background
					HBRUSH backbrush = CreateHatchBrush(HS_DIAGCROSS, RGB(192, 192, 192));
					FillRect(hdc, &dr, backbrush);
					DeleteObject(backbrush);
				}
				else {
					// Draw the received image
					BITMAPINFO bmi;
					ZeroMemory(&bmi, sizeof(BITMAPINFO));
					bmi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
					bmi.bmiHeader.biSizeImage = (LONG)(g_SenderWidth * g_SenderHeight * 4); // Pixel buffer size
					bmi.bmiHeader.biWidth = (LONG)g_SenderWidth;   // Width of buffer
					bmi.bmiHeader.biHeight = (LONG)g_SenderHeight;  // Height of buffer
					bmi.bmiHeader.biPlanes = 1;
					bmi.bmiHeader.biBitCount = 32;
					bmi.bmiHeader.biCompression = BI_RGB;
					// StretchDIBits adapts the pixel buffer received from the sender
					// to the window size. The sender can be resized or changed.
					SetStretchBltMode(hdc, COLORONCOLOR);
					StretchDIBits(hdc,
						0, 0,
						(dr.right - dr.left), (dr.bottom - dr.top), // destination rectangle 
						0, 0,
						g_SenderWidth, g_SenderHeight, // source rectangle 
						pixelBuffer,
						&bmi,
						DIB_RGB_COLORS,
						SRCCOPY);
				}
			}
			EndPaint(hWnd, &ps);
        }
        break;

	// SPOUT
	case WM_RBUTTONDOWN:
		// RH click to select a sender
		receiver.SelectSender();
		break;
    
	case WM_DESTROY:
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Message handler for about box.
// SPOUT : adapted for this example.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
 	UNREFERENCED_PARAMETER(lParam);
	char tmp[MAX_PATH];
	char about[1024];
	LPDRAWITEMSTRUCT lpdis;
	HWND hwnd = NULL;
	HCURSOR cursorHand = NULL;
	HINSTANCE hInstance = GetModuleHandle(NULL);

    switch (message)
    {
    case WM_INITDIALOG:

		sprintf_s(about, 256, "                WinSpoutDX");
		strcat_s(about, 1024, "\n\n\n");
		strcat_s(about, 1024, "Windows Spout receiver example\n");
		strcat_s(about, 1024, "using the SpoutDX class receive\n");
		strcat_s(about, 1024, "a buffer and display it in WM_PAINT.");
		SetDlgItemTextA(hDlg, IDC_ABOUT_TEXT, (LPCSTR)about);

		// Spout website hyperlink hand cursor
		cursorHand = LoadCursor(NULL, IDC_HAND);
		hwnd = GetDlgItem(hDlg, IDC_SPOUT_URL);
		SetClassLongPtrA(hwnd, GCLP_HCURSOR, (LONG_PTR)cursorHand);
        return (INT_PTR)TRUE;

	case WM_DRAWITEM:
		// The blue hyperlink
		lpdis = (LPDRAWITEMSTRUCT)lParam;
		if (lpdis->itemID == -1) break;
		SetTextColor(lpdis->hDC, RGB(6, 69, 173));
		switch (lpdis->CtlID) {
		case IDC_SPOUT_URL:
			DrawTextA(lpdis->hDC, "http://spout.zeal.co", -1, &lpdis->rcItem, DT_LEFT);
			break;
		default:
			break;
		}
		break;

    case WM_COMMAND:

		if (LOWORD(wParam) == IDC_SPOUT_URL) {
			// Open the website url
			sprintf_s(tmp, MAX_PATH, "http://spout.zeal.co");
			ShellExecuteA(hDlg, "open", tmp, NULL, NULL, SW_SHOWNORMAL);
			EndDialog(hDlg, 0);
			return (INT_PTR)TRUE;
		}

        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

// That's all..